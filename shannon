#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = 'Ã–nder Kartal'

import argparse
import io
import os
import sys

import pandas as pd

from shannonlib.core import divergence


def run_divergence(args):
    """Run subcommand for divergence.
    """

    if os.path.isfile(args.output) and not os.stat(args.output).st_size == 0:
        msg = "-- Stopped!\n-- Output file exists and is not empty."
        sys.exit(msg)

    metadata = args.metadata.read()

    try:
        meta = pd.read_csv(io.StringIO(metadata), comment='#',
                             header=0, index_col=args.index)
        _ = meta[args.files]
    except KeyError:
        try:
            meta = pd.read_csv(io.StringIO(metadata), comment='#', header=0,
                                 sep='\t', index_col=args.index)
            _ = meta[args.files]
        except KeyError:
            msg = ('-- Stopped!\n'
                   '-- Could not parse metadata.\n'
                   '-- 1. Ensure that fields are tab- or comma-separated\n'
                   '-- 2. Ensure that columns "url" and "label" are present')
            sys.exit(msg)

    try:
        assert(len(args.dcols) == len(args.dnames))
        dtypes = [float if args.prob else int] * len(args.dcols)
        dcols = [col - 1 for col in args.dcols]
        gpf_data = [list(zip(dcols, args.dnames, dtypes))]
    except AssertionError:
        msg = ('-- Stopped!\n'
               '-- Length of --dcols and --dnames must match')
        sys.exit(msg)

    try:
        assert set(args.hierarchy) < set(meta.columns)
    except AssertionError:
        msg = ('-- Stopped!\n'
               '-- Sampling hierarchy factors must be present in metadata')
        sys.exit(msg)

    print('processing sequence {} ...'.format(args.sequence))

    divergence(meta, chrom=args.sequence, data_columns=gpf_data,
               outfile=args.output, chunksize=args.chunk,
               hierarchy=args.hierarchy, data_url=args.files)

    return None


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    # main parser
    parser.prog = 'shannon'
    parser.description = 'Command-line interface to %(prog)s.'

    # cluster
    parser_cluster = subparsers.add_parser('cluster')

    # segment
    parser_segment = subparsers.add_parser('seg')

    # divergence
    parser_div = subparsers.add_parser(
        'div', formatter_class=argparse.RawTextHelpFormatter)

    parser_div.set_defaults(func=run_divergence)
    parser_div.help = 'JS Divergence for genome position files (GPFs).'
    parser_div.description = parser_div.help

    parser_div_required = parser_div.add_argument_group('required arguments')

    parser_div.add_argument(
        '--prob', action='store_true',
        help='indicate that data are probabilites (default: counts)')

    parser_div.add_argument(
        '--chunk', metavar='SIZE', default=1e4, type=int,
        help=('set size of data to process in-memory (default: %(default)d)\n'
              '- in terms of expected number of genome positions\n'
              '- higher numbers lead to more memory-hungry, faster computations'))

    parser_div.add_argument(
        '--hierarchy', metavar='FACTOR', nargs='+', type=str, default=[],
        help=('specify sampling hierarchy (top-down)\n'
              '- must be a subset of factors in the metadata table')
    )

    parser_div_required.add_argument(
        '-m', '--metadata', metavar='FILE', type=argparse.FileType('r'),
        required=True, help=('URL for GPF metadata\n'
                             '- comment lines (#) are ignored\n'
                             '- values must be comma- or tab-separated\n'
                             '- first non-comment line must be header\n'
                             '- "url" and "label" columns are required\n'
                             '- if stdin is metadata use "--metadata -"'))

    parser_div_required.add_argument(
        '-i', '--index', metavar='COLUMN NAME',
        type=str, default='label',
        help='name of index column in metadata (default: %(default)d)')

    parser_div_required.add_argument(
        '-f', '--files', metavar='COLUMN NAME',
        type=str, default='url',
        help='name of filepath column in metadata (default: %(default)d)')

    parser_div_required.add_argument(
        '-o', '--output', metavar='FILE', required=True, help='output filepath')

    parser_div_required.add_argument(
        '-s', '--sequence', metavar='ID', required=True, type=str,
        help='specify sequence in GPF (chromosome or scaffold)')

    parser_div_required.add_argument(
        '-c', '--dcols', metavar='COLN', nargs='+', required=True, type=int,
        help='column numbers (1-based) in GPFs that hold the data')

    parser_div_required.add_argument(
        '-n', '--dnames', metavar='NAME', nargs='+', required=True, type=str,
        help='names of data columns following the order in --dcols')

    args = parser.parse_args()
    args.func(args)
