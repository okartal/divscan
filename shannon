#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = 'Ã–nder Kartal'

import argparse
import os
import sys

from shannonlib.core import divit


def run_divit(args):
    metadata = args.metadata
    chrom = args.sequence
    query = None
    groupby = None
    outfile = args.output

    divit(metadata=metadata, chrom=chrom,
          outfile=outfile, query=query, groupby=groupby)

    return None


if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    # main parser
    parser.prog = 'shannon'
    parser.description = 'Command-line interface to %(prog)s.'

    # cluster
    parser_cluster = subparsers.add_parser('cluster')

    # segment
    parser_segment = subparsers.add_parser('segment')

    # divit
    parser_divit = subparsers.add_parser(
        'divit',
        help='Total JS Divergence.',
        description='''
        Within-group JS Divergence for the whole sample.
        ''')

    parser_divit.add_argument(
        '-s',
        '--sequence',
        required=True,
        type=str,
        help='''
        Query chromosome or scaffold name in genome position files.
        ''')
    parser_divit.add_argument(
        '-m',
        '--metadata',
        metavar="URL",
        required=True,
        help='''
        Metadata table with one row for each genome
        position file in the sample. Lines starting with  # are
        ignored. The first line is interpreted as the header.
        The columns "url" and "label" are mandatory for each
        entry.
        ''')
    parser_divit.add_argument(
        '-o',
        '--output',
        metavar='FILE',
        help='''
        Name of the output file. If the file exists and
        is not empty, execution will stop.
        ''')

    parser_divit.set_defaults(func=run_divit)

# parser_divit.add_argument('-q', '--query', metavar='"EXPRESSION"',
    # type=str,
    #                           help='''
    #                     Query to select a subsample. The expression has to be in
    #                     double quotes and must reference columns in the metadata
    #                     table (e.g. -q "tissue == 'leaf'", -q "age >= 32").
    #                     ''')

    # parser.add_argument('-g', '--groupby', metavar='STR', nargs='+', type=str,
    #                     help='''
    #                     The factor according to which the selected set is
    #                     partitioned; has to match column names in the input
    #                     metadata. One or more factors can be given, which
    #                     produces a file for each combination of factors.
    #                     ''')

    args = parser.parse_args()

    if os.path.isfile(args.output) and not os.stat(args.output).st_size == 0:
        msg = "\nExecution stops! Output file exists and is not empty!\n"
        sys.exit(msg)

    args.func(args)
